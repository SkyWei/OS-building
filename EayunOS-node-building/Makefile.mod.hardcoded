# Makefile.in generated by automake 1.11.1 from Makefile.am.
# Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# Copyright (C) 2010, Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.  A copy of the GNU General Public License is
# also available at http://www.gnu.org/copyleft/gpl.html.

pkgdatadir = $(datadir)/ovirt-node
pkgincludedir = $(includedir)/ovirt-node
pkglibdir = $(libdir)/ovirt-node
pkglibexecdir = $(libexecdir)/ovirt-node
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
subdir = .
DIST_COMMON = $(am__configure_deps) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/ovirt-node-iso.spec.in \
	$(top_srcdir)/configure install-sh missing
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \
 configure.lineno config.status.lineno
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES = ovirt-node-iso.spec
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
distdir = $(PACKAGE)-$(VERSION)
top_distdir = $(distdir)
am__remove_distdir = \
  { test ! -d "$(distdir)" \
    || { find "$(distdir)" -type d ! -perm -200 -exec chmod u+w {} ';' \
         && rm -fr "$(distdir)"; }; }
DIST_ARCHIVES = $(distdir).tar.gz
GZIP_ENV = --best
distuninstallcheck_listfiles = find . -type f -print
distcleancheck_listfiles = find . -type f -print
ACLOCAL = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run aclocal-1.11
AMTAR = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run tar
AUTOCONF = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run autoconf
AUTOHEADER = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run autoheader
AUTOMAKE = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run automake-1.11
AWK = gawk
BUILD_NUMBER = 201403181455
CENTOS = 6
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"ovirt-node\" -DPACKAGE_TARNAME=\"ovirt-node\" -DPACKAGE_VERSION=\"3.0.4\" -DPACKAGE_STRING=\"ovirt-node\ 3.0.4\" -DPACKAGE_BUGREPORT=\"node-devel@ovirt.org\" -DPACKAGE=\"ovirt-node\" -DVERSION=\"3.0.4\"
#DISTRO = centos6
DISTRO = eayunos-node-3.3
ECHO_C = 
ECHO_N = -n
ECHO_T = 
FEDORA = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
#PACKAGE = ovirt-node-iso
PACKAGE = eayunos-node-iso
PACKAGE_BUGREPORT = node-devel@ovirt.org
#PACKAGE_NAME = ovirt-node-iso
#PACKAGE_STRING = ovirt-node 3.0.4
#PACKAGE_TARNAME = ovirt-node
#PACKAGE_VERSION = 3.0.4
PACKAGE_NAME = eayunos-node-iso
PACKAGE_STRING = eayunos-node 3.3
PACKAGE_TARNAME = eayunos-node
PACKAGE_VERSION = 3.3
PATH_SEPARATOR = :
#PRODUCT_NAME = oVirt Node Hypervisor
PRODUCT_NAME = EayunOS Node Hypervisor
RECIPES = /usr/share/ovirt-node-recipe
RHEL = 6
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
#VERSION = 3.0.4
VERSION = 3.3
abs_builddir = /root/ovirt-node-building/upstream/ovirt-node-iso
abs_srcdir = /root/ovirt-node-building/upstream/ovirt-node-iso
abs_top_builddir = /root/ovirt-node-building/upstream/ovirt-node-iso
abs_top_srcdir = /root/ovirt-node-building/upstream/ovirt-node-iso
am__leading_dot = .
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /root/ovirt-node-building/upstream/ovirt-node-iso/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = 
top_builddir = .
top_srcdir = .
NAME0 = ovirt-node-image
RECIPE = $(PACKAGE).ks
PRODUCT = EayunOS Node Hypervisor
PKG_FMT = iso
ARCH = $(shell rpm --eval '%{_arch}')
#RELEASE := $(shell rpm -q --qf "%{RELEASE}\n" --define "BUILD_NUMBER $(BUILD_NUMBER)" --specfile ./ovirt-node-iso.spec | head -n1)
RELEASE=1
RECIPE_DIR = /usr/share/ovirt-node-recipe
EXTRA_DIST = \
	ovirt-node-iso.spec.in       \
	ovirt-node-iso.spec          \
	$(PACKAGE)-$(VERSION)-$(RELEASE).iso

DISTCLEANFILES = $(PACKAGE)-$(VERSION).tar.gz \
				 repos.ks \
				 Makefile.in \
				 aclocal.m4 \
				 autom4te.cache \
				 configure \
				 install-sh \
				 missing \
				 *.ks


# Need to find node-creator script
# Default to RECIPE_DIR/node-creator
# then check local dir
# then check PATH
NODE_CREATOR = $(shell ( test -e $(RECIPE_DIR)/node-creator && echo "$(RECIPE_DIR)/node-creator" ) || ( test -e node-creator && echo "./node-creator" ) || which node-creator 2>/dev/null)
FEDORA_MIRROR = http://mirrors.fedoraproject.org/mirrorlist
OVIRT_BASE_URL = http://ovirt.org/releases/
NODE_BASE_URL = $(OVIRT_BASE_URL)/node-base
NODE_URL = $(NODE_BASE_URL)/stable/rpm
NODE_NIGHTLY_URL = $(NODE_BASE_URL)/nightly/rpm
NODE_BETA_URL = $(NODE_BASE_URL)/beta/rpm
NODE_ALPHA_URL = $(NODE_BASE_URL)/alpha/rpm
OVIRT_URL = $(OVIRT_BASE_URL)/stable/rpm
OVIRT_NIGHTLY_URL = $(OVIRT_BASE_URL)/nightly/rpm
OVIRT_BETA_URL = $(OVIRT_BASE_URL)/beta/rpm
OVIRT_ALPHA_URL = $(OVIRT_BASE_URL)/alpha/rpm
VIRT_PREVIEW = http://fedorapeople.org/groups/virt/virt-preview
CUR_RAWHIDE = 20
CUR_DEVEL = 20
CENTOS_MIRROR = http://mirrorlist.centos.org/
CENTOS_RELEASE = 6

# For Release: 0..., set _ovirt_dev=1 so that we get extra_release.GIT-
# annotated rpm version strings.
_ovirt_dev = \
 $(shell grep -q '^[[:space:]]*Release:[[:space:]]*[0-9\.]*999' \
   $(top_srcdir)/*.spec && echo 1 || :)

all: all-am

.SUFFIXES:
am--refresh:
	@:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \
	      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    echo ' $(SHELL) ./config.status'; \
	    $(SHELL) ./config.status;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	$(SHELL) ./config.status --recheck

$(top_srcdir)/configure:  $(am__configure_deps)
	$(am__cd) $(srcdir) && $(AUTOCONF)
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)
$(am__aclocal_m4_deps):
ovirt-node-iso.spec: $(top_builddir)/config.status $(srcdir)/ovirt-node-iso.spec.in
	cd $(top_builddir) && $(SHELL) ./config.status $@
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	$(am__remove_distdir)
	test -d "$(distdir)" || mkdir "$(distdir)"
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	-test -n "$(am__skip_mode_fix)" \
	|| find "$(distdir)" -type d ! -perm -755 \
		-exec chmod u+rwx,go+rx {} \; -o \
	  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -400 -exec chmod a+r {} \; -o \
	  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \; \
	|| chmod -R a+r "$(distdir)"
dist-gzip: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

dist-bzip2: distdir
	tardir=$(distdir) && $(am__tar) | bzip2 -9 -c >$(distdir).tar.bz2
	$(am__remove_distdir)

dist-lzma: distdir
	tardir=$(distdir) && $(am__tar) | lzma -9 -c >$(distdir).tar.lzma
	$(am__remove_distdir)

dist-xz: distdir
	tardir=$(distdir) && $(am__tar) | xz -c >$(distdir).tar.xz
	$(am__remove_distdir)

dist-tarZ: distdir
	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z
	$(am__remove_distdir)

dist-shar: distdir
	shar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz
	$(am__remove_distdir)

dist-zip: distdir
	-rm -f $(distdir).zip
	zip -rq $(distdir).zip $(distdir)
	$(am__remove_distdir)

dist dist-all: distdir
	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz
	$(am__remove_distdir)

# This target untars the dist file and tries a VPATH configuration.  Then
# it guarantees that the distribution is self-contained by making another
# tarfile.
distcheck: dist
	case '$(DIST_ARCHIVES)' in \
	*.tar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\
	*.tar.bz2*) \
	  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\
	*.tar.lzma*) \
	  lzma -dc $(distdir).tar.lzma | $(am__untar) ;;\
	*.tar.xz*) \
	  xz -dc $(distdir).tar.xz | $(am__untar) ;;\
	*.tar.Z*) \
	  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\
	*.shar.gz*) \
	  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\
	*.zip*) \
	  unzip $(distdir).zip ;;\
	esac
	chmod -R a-w $(distdir); chmod u+w $(distdir)
	mkdir $(distdir)/_build
	mkdir $(distdir)/_inst
	chmod a-w $(distdir)
	test -d $(distdir)/_build || exit 0; \
	dc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\/]:[\\/],/,'` \
	  && dc_destdir="$${TMPDIR-/tmp}/am-dc-$$$$/" \
	  && am__cwd=`pwd` \
	  && $(am__cd) $(distdir)/_build \
	  && ../configure --srcdir=.. --prefix="$$dc_install_base" \
	    $(DISTCHECK_CONFIGURE_FLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) \
	  && $(MAKE) $(AM_MAKEFLAGS) dvi \
	  && $(MAKE) $(AM_MAKEFLAGS) check \
	  && $(MAKE) $(AM_MAKEFLAGS) install \
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck \
	  && $(MAKE) $(AM_MAKEFLAGS) uninstall \
	  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir="$$dc_install_base" \
	        distuninstallcheck \
	  && chmod -R a-w "$$dc_install_base" \
	  && ({ \
	       (cd ../.. && umask 077 && mkdir "$$dc_destdir") \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" install \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" uninstall \
	       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR="$$dc_destdir" \
	            distuninstallcheck_dir="$$dc_destdir" distuninstallcheck; \
	      } || { rm -rf "$$dc_destdir"; exit 1; }) \
	  && rm -rf "$$dc_destdir" \
	  && $(MAKE) $(AM_MAKEFLAGS) dist \
	  && rm -rf $(DIST_ARCHIVES) \
	  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \
	  && cd "$$am__cwd" \
	  || exit 1
	$(am__remove_distdir)
	@(echo "$(distdir) archives ready for distribution: "; \
	  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \
	  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'
distuninstallcheck:
	@$(am__cd) '$(distuninstallcheck_dir)' \
	&& test `$(distuninstallcheck_listfiles) | wc -l` -le 1 \
	   || { echo "ERROR: files left after uninstall:" ; \
	        if test -n "$(DESTDIR)"; then \
	          echo "  (check DESTDIR support)"; \
	        fi ; \
	        $(distuninstallcheck_listfiles) ; \
	        exit 1; } >&2
distcleancheck: distclean
	@if test '$(srcdir)' = . ; then \
	  echo "ERROR: distcleancheck can only run from a VPATH build" ; \
	  exit 1 ; \
	fi
	@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \
	  || { echo "ERROR: files left in build directory after distclean:" ; \
	       $(distcleancheck_listfiles) ; \
	       exit 1; } >&2
check-am: all-am
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
	-rm -rf $(top_srcdir)/autom4te.cache
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am am--refresh check check-am clean clean-generic dist \
	dist-all dist-bzip2 dist-gzip dist-lzma dist-shar dist-tarZ \
	dist-xz dist-zip distcheck distclean distclean-generic \
	distcleancheck distdir distuninstallcheck dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am uninstall uninstall-am

PRODUCT_SHORT     ?= $(PRODUCT)
MANAGEMENT		  ?= NONE
BUILD_TYPE        ?= STABLE
OVIRT_CACHE_DIR	?= $(HOME)/ovirt-cache

rpms: dist
	rpmbuild --define "BUILD_NUMBER $(BUILD_NUMBER)" $(RPM_FLAGS) -ta $(distdir).tar.gz

srpms: dist
	rpmbuild --define "BUILD_NUMBER $(BUILD_NUMBER)" $(RPM_FLAGS) -ts $(distdir).tar.gz

publish: rpms
	mkdir -p $(OVIRT_CACHE_DIR)
	rsync -aq $(shell rpm --eval '%{_rpmdir}')/ $(OVIRT_CACHE_DIR)/ovirt/
	rsync -aq $(shell rpm --eval '%{_srcrpmdir}')/ $(OVIRT_CACHE_DIR)/ovirt/src
	rsync -aq $(PACKAGE_NAME)-$(VERSION)-$(RELEASE).iso $(OVIRT_CACHE_DIR)/ovirt/binary/
	createrepo $(OVIRT_CACHE_DIR)/ovirt

$(PACKAGE).ks: version.ks

clean_ks:
	rm -f *.ks

kickstarts: clean_ks node-creator
	cp $(RECIPE_DIR)/*.ks .
	rm -f version.ks

repos.ks: kickstarts
	#( \
    #  if [ -n "$(CENTOS)" ]; then \
    #    CENTOS_REPO_LINE="repo --name=centos --mirrorlist=$(CENTOS_MIRROR)?release=$(CENTOS_RELEASE)&arch=${ARCH}&repo=os" ;\
    #    UPDATES_REPO_LINE="repo --name=centos-updates --mirrorlist=$(CENTOS_MIRROR)?release=$(CENTOS_RELEASE)&arch=${ARCH}&repo=updates" ;\
    #    EPEL_REPO_LINE="repo --name=epel --baseurl=http://dl.fedoraproject.org/pub/epel/$(CENTOS_RELEASE)/${ARCH}/" ;\
    #    OVIRT_STABLE_REPO_LINE="repo --name=ovirt-stable-repo --baseurl=$(OVIRT_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    OVIRT_NIGHTLY_REPO_LINE="repo --name=ovirt-nightly-repo --baseurl=$(OVIRT_NIGHTLY_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    OVIRT_BETA_REPO_LINE="repo --name=ovirt-beta-repo --baseurl=$(OVIRT_BETA_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    OVIRT_ALPHA_REPO_LINE="repo --name=ovirt-alpha-repo --baseurl=$(OVIRT_ALPHA_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    NODE_STABLE_REPO_LINE="repo --name=node-stable-repo --baseurl=$(NODE_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    NODE_NIGHTLY_REPO_LINE="repo --name=node-nightly-repo --baseurl=$(NODE_NIGHTLY_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    NODE_BETA_REPO_LINE="repo --name=node-beta-repo --baseurl=$(NODE_BETA_URL)/EL/$(CENTOS_RELEASE)\n" ;\
    #    NODE_ALPHA_REPO_LINE="repo --name=node-alpha-repo --baseurl=$(NODE_ALPHA_URL)/EL/$(CENTOS_RELEASE)\n" ;\
	#GLUSTER_REPO_LINE="repo --name=gluster-3.4 --baseurl=http://download.gluster.org/pub/gluster/glusterfs/3.4/3.4.0/CentOS/epel-6Server/x86_64/\n" ;\
    #    echo "$${CENTOS_REPO_LINE}" > repos.ks ;\
    #    echo "$${UPDATES_REPO_LINE}" >> repos.ks ;\
    #    echo "$${EPEL_REPO_LINE}" >> repos.ks ;\
    #  elif [ -n "$(FEDORA)" ]; then \
    #        OVIRT_STABLE_REPO_LINE="repo --name=ovirt-stable-repo --baseurl=$(OVIRT_URL)/Fedora/$(FEDORA)\n" ;\
    #        OVIRT_NIGHTLY_REPO_LINE="repo --name=ovirt-nightly-repo --baseurl=$(OVIRT_NIGHTLY_URL)/Fedora/$(FEDORA)\n" ;\
    #        OVIRT_BETA_REPO_LINE="repo --name=ovirt-beta-repo --baseurl=$(OVIRT_BETA_URL)/Fedora/$(FEDORA)\n" ;\
    #        OVIRT_ALPHA_REPO_LINE="repo --name=ovirt-alpha-repo --baseurl=$(OVIRT_ALPHA_URL)/Fedora/$(FEDORA)\n" ;\
    #        NODE_STABLE_REPO_LINE="repo --name=node-stable-repo --baseurl=$(NODE_URL)/Fedora/$(FEDORA)\n" ;\
    #        NODE_NIGHTLY_REPO_LINE="repo --name=node-nightly-repo --baseurl=$(NODE_NIGHTLY_URL)/Fedora/$(FEDORA)\n" ;\
    #        NODE_BETA_REPO_LINE="repo --name=node-beta-repo --baseurl=$(NODE_BETA_URL)/Fedora/$(FEDORA)\n" ;\
    #        NODE_ALPHA_REPO_LINE="repo --name=node-alpha-repo --baseurl=$(NODE_ALPHA_URL)/Fedora/$(FEDORA)\n" ;\
    #        if [ 0$(FEDORA) == 0$(CUR_RAWHIDE) ]; then \
    #            FEDORA_REPO=rawhide ;\
    #            FEDORA_REPO_LOC="$(if $(FEDORA_URL),--baseurl=$(FEDORA_URL)/development/rawhide/$(ARCH)/os,--mirrorlist=$(FEDORA_MIRROR)?repo=rawhide&arch=$(ARCH))" ;\
    #        elif [ 0$(FEDORA) == 0$(CUR_DEVEL) ]; then \
    #            FEDORA_REPO=f$(FEDORA) ;\
    #            FEDORA_REPO_LOC="$(if $(FEDORA_URL),--baseurl=$(FEDORA_URL)/development/$(FEDORA)/$(ARCH)/os,--mirrorlist=$(FEDORA_MIRROR)?repo=fedora-$(FEDORA)&arch=$(ARCH))" ;\
    #            UPDATE_REPO_LINE="repo --name=$${FEDORA_REPO}-updates-testing $(if $(FEDORA_URL),--baseurl=$(FEDORA_URL)/updates/testing/$(FEDORA)/${ARCH},--mirrorlist=$(FEDORA_MIRROR)?repo=updates-testing-f$(FEDORA)&arch=$(ARCH))\n" ;\
    #            VIRT_PREVIEW_LINE="repo --name=$${FEDORA_REPO}-virt-preview --baseurl=$(VIRT_PREVIEW)/fedora-$(FEDORA)/$(ARCH)\n" ;\
    #        else \
    #            FEDORA_REPO=f$(FEDORA) ;\
    #            FEDORA_REPO_LOC="$(if $(FEDORA_URL),--baseurl=$(FEDORA_URL)/releases/$(FEDORA)/Everything/${ARCH}/os,--mirrorlist=$(FEDORA_MIRROR)?repo=fedora-$(FEDORA)&arch=$(ARCH))" ;\
    #            UPDATE_REPO_LINE="repo --name=$${FEDORA_REPO}-updates $(if $(FEDORA_URL),--baseurl=$(FEDORA_URL)/updates/$(FEDORA)/${ARCH},--mirrorlist=$(FEDORA_MIRROR)?repo=updates-released-f$(FEDORA)&arch=$(ARCH))\n" ;\
    #            VIRT_PREVIEW_LINE="repo --name=$${FEDORA_REPO}-virt-preview --baseurl=$(VIRT_PREVIEW)/fedora-$(FEDORA)/$(ARCH)\n" ;\
    #        fi ;\
    #        echo "repo --name=$${FEDORA_REPO} $${FEDORA_REPO_LOC}" > repos.ks ;\
    #        printf "$${UPDATE_REPO_LINE}" >> repos.ks ;\
    #        printf "$${VIRT_PREVIEW_LINE}" >> repos.ks ;\
    #  else \
    #        echo "# NODE_REPO_URL=$(NODE_REPO_URL)" > $@ ;\
    #        for repo in $(NODE_REPO_URL); do \
    #           echo "repo --name=repo$${i} --baseurl=$${repo}" >> $@ ;\
    #           i=$${i}_ ;\
    #        done ;\
    #  fi ;\
    #  printf "$${NODE_STABLE_REPO_LINE}" >> repos.ks ;\
    #  printf "$${GLUSTER_REPO_LINE}" >> repos.ks ;\
	#  if [ "$${MANAGEMENT}" == "OVIRT" ]; then \
    #    printf "$${OVIRT_STABLE_REPO_LINE}" >> repos.ks ;\
    #  fi ;\
    #  if [ "$${BUILD_TYPE}" == "NIGHTLY" ]; then \
	#	if [ "$${MANAGEMENT}" == "OVIRT" ]; then \
    #        printf "$${OVIRT_NIGHTLY_REPO_LINE}" >> repos.ks ;\
    #        printf "$${OVIRT_ALPHA_REPO_LINE}" >> repos.ks ;\
    #        printf "$${OVIRT_BETA_REPO_LINE}" >> repos.ks ;\
    #    fi ;\
    #    printf "$${NODE_NIGHTLY_REPO_LINE}" >> repos.ks ;\
    #    printf "$${NODE_ALPHA_REPO_LINE}" >> repos.ks ;\
    #    printf "$${NODE_BETA_REPO_LINE}" >> repos.ks ;\
    #  elif [ "$${BUILD_TYPE}" == "ALPHA" ]; then \
	#	if [ "$${MANAGEMENT}" == "OVIRT" ]; then \
    #        printf "$${OVIRT_ALPHA_REPO_LINE}" >> repos.ks ;\
    #        printf "$${OVIRT_BETA_REPO_LINE}" >> repos.ks ;\
    #    fi ;\
    #    printf "$${NODE_BETA_REPO_LINE}" >> repos.ks ;\
    #    printf "$${NODE_ALPHA_REPO_LINE}" >> repos.ks ;\
    #  elif [ "$${BUILD_TYPE}" == "BETA" ]; then \
	#	if [ "$${MANAGEMENT}" == "OVIRT" ]; then \
    #        printf "$${OVIRT_BETA_REPO_LINE}" >> repos.ks ;\
    #    fi ;\
    #    printf "$${NODE_BETA_REPO_LINE}" >> repos.ks ;\
    #  fi ;\
	#)
	( \
		CENTOS_REPO_LINE="repo --name=centos --baseurl=file:///data/mirrors/CentOS/6.5/os/x86_64/" ;\
		EPEL_REPO_LINE="repo --name=epel --baseurl=file:///data/mirrors/epel/6/x86_64/" ;\
		OVIRT_STABLE_REPO_LINE="repo --name=ovirt-stable-repo --baseurl=file:///data/mirrors/oVirt/stable/rpm/EL/6.5/" ;\
		GLUSTER_REPO_LINE="repo --name=gluster-3.4 --baseurl=file:///data/mirrors/gluster/3.4.0/CentOS/epel-6Server/x86_64/" ;\
		echo "$${CENTOS_REPO_LINE}" > repos.ks ;\
		echo "$${EPEL_REPO_LINE}" >> repos.ks ;\
		echo "$${OVIRT_STABLE_REPO_LINE}" >> repos.ks ;\
		echo "$${GLUSTER_REPO_LINE}" >> repos.ks ;\
	)

version.ks: repos.ks
	( \
	    echo "PRODUCT='"$(PRODUCT)"'" ;\
	    echo "PRODUCT_SHORT='"$(PRODUCT_SHORT)"'" ;\
	    echo "PACKAGE=$(PACKAGE)" ;\
	    echo "VERSION=$(VERSION)" ;\
	    echo "RELEASE=$(RELEASE)" ;\
	) > $@
	ksflatten -c $(NAME0).ks -o $(PACKAGE).ks

$(PACKAGE).$(PKG_FMT) iso: kickstarts version.ks repos.ks
	@test ! -e "$(PACKAGE_NAME)-$(VERSION)-$(RELEASE).iso" || ( echo "ERROR: $(PACKAGE_NAME)-$(VERSION)-$(RELEASE).iso already exists." && exit 1 )
	$(NODE_CREATOR) $(RECIPE)
	@test -e "$(PACKAGE_NAME).iso" || ( echo "ERROR: ISO build failed." && exit 1 )
	mv $(PACKAGE_NAME).iso $(PACKAGE_NAME)-$(VERSION)-$(RELEASE).iso

verrel:
	@echo ${PACKAGE_NAME}-${VERSION}-${RELEASE}

node-creator:
	@test -n "${NODE_CREATOR}" || ( echo "No node-creator script found" && exit 1 )
	@echo "Node Creator script is:  ${NODE_CREATOR}"

all: $(PACKAGE).ks

.PHONY: $(PACKAGE).ks

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
