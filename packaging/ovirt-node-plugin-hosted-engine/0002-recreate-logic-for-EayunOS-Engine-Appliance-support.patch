From b3d53cf9245a39207e670b9405429c944d43e4a7 Mon Sep 17 00:00:00 2001
From: Zhao Chao <zhaochao1984@gmail.com>
Date: Wed, 10 Dec 2014 15:24:59 +0800
Subject: [PATCH] recreate logic for EayunOS Engine Appliance support.

Signed-off-by: Zhao Chao <zhaochao1984@gmail.com>
---
 src/hosted_engine_page.py | 245 ++++++----------------------------------------
 1 file changed, 30 insertions(+), 215 deletions(-)

diff --git a/src/hosted_engine_page.py b/src/hosted_engine_page.py
index 712d66c..f258426 100755
--- a/src/hosted_engine_page.py
+++ b/src/hosted_engine_page.py
@@ -23,7 +23,6 @@ from urlparse import urlparse
 
 from ovirt.node import plugins, ui, utils, valid
 from ovirt.node.plugins import Changeset
-from ovirt.node.config.defaults import NodeConfigFileSection
 from ovirt.node.utils.fs import File
 from ovirt_hosted_engine_ha.client import client
 
@@ -38,10 +37,15 @@ import time
 Configure Hosted Engine
 """
 
+import glob
+EAYUNOS_APPLIANCE_BASE_DIR='/usr/share/EayunOS-Engine-Appliance'
+EAYUNOS_APPLIANCE_PATH=glob.glob(EAYUNOS_APPLIANCE_BASE_DIR + '/*.ova.gz')[0]
+
 
 class Plugin(plugins.NodePlugin):
     VM_CONF_PATH = "/etc/ovirt-hosted-engine/vm.conf"
     HOSTED_ENGINE_SETUP_DIR = "/data/ovirt-hosted-engine-setup"
+    HOSTED_ENGINE_SETUP_TEMP_DIR = HOSTED_ENGINE_SETUP_DIR + "/tempdir"
     _server = None
     _show_progressbar = False
     _model = {}
@@ -55,13 +59,7 @@ class Plugin(plugins.NodePlugin):
     def rank(self):
         return 110
 
-    def update(self, imagepath):
-        (valid.Empty() | valid.Text())(imagepath)
-        return {"OVIRT_HOSTED_ENGINE_IMAGE_PATH": imagepath}
-
     def model(self):
-        cfg = HostedEngine().retrieve()
-
         configured = os.path.exists(self.VM_CONF_PATH)
 
         conf_status = "Configured" if configured else "Not configured"
@@ -79,9 +77,8 @@ class Plugin(plugins.NodePlugin):
             "hosted_engine.enabled": str(conf_status),
             "hosted_engine.vm": vm,
             "hosted_engine.status": vm_status,
-            "hosted_engine.diskpath": cfg["imagepath"] or "",
             "hosted_engine.display_message": "",
-            "hosted_engine.pxe": cfg["pxe"]}
+            "hosted_engine.additional_host": ""}
 
         self._model.update(model)
 
@@ -102,21 +99,9 @@ class Plugin(plugins.NodePlugin):
                               ("Engine Status: ")),
 
               ui.Divider("divider[0]"),
-              ui.Entry("hosted_engine.diskpath",
-                       "Engine ISO/OVA URL for download:"),
-              ui.Divider("divider[1]"),
-              ui.Checkbox("hosted_engine.pxe", "PXE Boot Engine VM")
+              ui.Checkbox("hosted_engine.additional_host", "Additional HA Node")
               ]
 
-        if self._show_progressbar:
-            if "progress" in self._model:
-                ws.append(ui.ProgressBar("download.progress",
-                                         int(self._model["progress"])))
-            else:
-                ws.append(ui.ProgressBar("download.progress", 0))
-
-            ws.append(ui.KeywordLabel("download.status", ""))
-
         page = ui.Page("page", ws)
         page.buttons = [ui.Button("action.setupengine",
                                   "Setup Hosted Engine")
@@ -136,70 +121,37 @@ class Plugin(plugins.NodePlugin):
         self.logger.debug("Changes: %s" % changes)
         self.logger.debug("Effective Model: %s" % effective_model)
 
-        engine_keys = ["hosted_engine.diskpath", "hosted_engine.pxe"]
-
         if effective_changes.contains_any(["action.setupengine"]):
-            HostedEngine().update(*effective_model.values_for(engine_keys))
-
-            imagepath = effective_model["hosted_engine.diskpath"]
-            pxe = effective_model["hosted_engine.pxe"]
+            self.imagepath = EAYUNOS_APPLIANCE_PATH
+            self.is_additional_host = effective_model["hosted_engine.additional_host"]
 
-            # Check whether we have unclear conditions
-            if not imagepath and not pxe:
-                self._model['display_message'] = "\n\nYou must enter a URL" \
-                    " or choose PXE to install the Engine VM"
-                self.show_dialog()
-                return self.ui_content()
-            elif imagepath and pxe:
-                self._model['display_message'] = "\n\nPlease choose either " \
-                                                 "PXE or an image to " \
-                                                 "retrieve, not both"
+            # Check whether we have EayunOS correctly installed
+            if not self.imagepath:
+                self._model['display_message'] = "\n\nYour copy of EayunOS" \
+                    " must be broken, please try to reinstall EayunOS"
                 self.show_dialog()
                 return self.ui_content()
 
             if not os.path.exists(self.HOSTED_ENGINE_SETUP_DIR):
                 os.makedirs(self.HOSTED_ENGINE_SETUP_DIR)
+            if not os.path.exists(self.HOSTED_ENGINE_SETUP_TEMP_DIR):
+                os.makedirs(self.HOSTED_ENGINE_SETUP_TEMP_DIR)
 
             temp_fd, self.temp_cfg_file = tempfile.mkstemp()
             os.close(temp_fd)
 
-            if pxe:
-                self.write_config(pxe=True)
-                self._configured = True
-                self.show_dialog()
-
-            else:
-                localpath = os.path.join(self.HOSTED_ENGINE_SETUP_DIR,
-                                         os.path.basename(imagepath))
-
-                if os.path.exists(localpath):
-                    # The image is already downloaded. Use that.
-                    self.write_config(imagepath=os.path.basename(imagepath))
+            self.write_config()
 
-                    self._configured = True
-                    self.show_dialog()
-
-                else:
-                    path_parsed = urlparse(imagepath)
-
-                    if not path_parsed.scheme:
-                        self._model['display_message'] = ("\nCouldn't parse "
-                                                          "URL. please check "
-                                                          "it manually.")
-
-                    elif path_parsed.scheme == 'http' or \
-                            path_parsed.scheme == 'https':
-                        self._show_progressbar = True
-                        self.application.show(self.ui_content())
-                        self._image_retrieve(imagepath,
-                                             self.HOSTED_ENGINE_SETUP_DIR)
+            self._configured = True
+            self.show_dialog()
 
         return self.ui_content()
 
     def show_dialog(self):
         def open_console():
-            utils.process.call("reset; screen ovirt-hosted-engine-setup" +
-                               " --config-append=%s" % self.temp_cfg_file,
+            utils.process.call("reset; screen bash -c 'ovirt-hosted-engine-setup" +
+                               " --config-append=%s" % self.temp_cfg_file +
+                               " ;read -p \"Press [Enter] to continue...\"'",
                                shell=True)
 
         def return_ok(dialog, changes):
@@ -226,8 +178,6 @@ class Plugin(plugins.NodePlugin):
                     if self._model['display_message']:
                         msg = self._model['display_message']
                         self._model['display_message'] = ''
-                    else:
-                        msg = "\n\nError Downloading ISO/OVA Image!"
 
                     dialog = ui.InfoDialog("dialog.notice",
                                            "Hosted Engine Setup",
@@ -240,11 +190,7 @@ class Plugin(plugins.NodePlugin):
                 self.logger.info("Exception on TUI!", exc_info=True)
                 open_console()
 
-    def _image_retrieve(self, imagepath, setup_dir):
-        _downloader = DownloadThread(self, imagepath, setup_dir)
-        _downloader.start()
-
-    def write_config(self, imagepath=None, pxe=False):
+    def write_config(self):
         f = File(self.temp_cfg_file)
 
         def write(line):
@@ -252,31 +198,17 @@ class Plugin(plugins.NodePlugin):
 
         self.logger.info("Saving Hosted Engine Config")
 
-        ova_path = None
-        boot = None
         write("[environment:default]")
 
-        if pxe:
-            boot = "pxe"
-
-        if imagepath:
-            if imagepath.endswith(".iso"):
-                boot = "cdrom"
-                write("OVEHOSTED_VM/vmCDRom=str:{imagepath}".format(
-                    imagepath=os.path.join(
-                        self.HOSTED_ENGINE_SETUP_DIR, imagepath
-                    )
-                ))
-            elif imagepath.endswith(".gz"):
-                boot = "disk"
-                ova_path = os.path.join(self.HOSTED_ENGINE_SETUP_DIR,
-                                        os.path.basename(imagepath))
+        if self.is_additional_host:
+            write("OVEHOSTED_CORE/isAdditionalHost=bool:True")
+        elif self.imagepath:
+            boot = "disk"
+            write("OVEHOSTED_VM/vmBoot=str:{boot}".format(boot=boot))
+            write("OVEHOSTED_VM/ovfArchive=str:{imagepath}".format(
+                imagepath=self.imagepath))
 
-        write("OVEHOSTED_VM/vmBoot=str:{boot}".format(boot=boot))
-
-        ovastr = "str:{ova_path}".format(ova_path=ova_path) if ova_path else \
-                 "none:None"
-        write("OVEHOSTED_VM/ovfArchive={ovastr}".format(ovastr=ovastr))
+        write("OVEHOSTED_CORE/tempDir=str:%s" % self.HOSTED_ENGINE_SETUP_TEMP_DIR)
 
         self.logger.info("Wrote hosted engine install configuration to "
                          "{cfg}".format(cfg=self.temp_cfg_file))
@@ -309,120 +241,3 @@ class Plugin(plugins.NodePlugin):
             vm_status = "Engine is running on {host}".format(host=host)
 
         return vm_status
-
-
-class DownloadThread(threading.Thread):
-    ui_thread = None
-
-    def __init__(self, plugin, url, setup_dir):
-        super(DownloadThread, self).__init__()
-        self.he_plugin = plugin
-        self.url = url
-        self.setup_dir = setup_dir
-
-    @property
-    def logger(self):
-        return self.he_plugin.logger
-
-    def run(self):
-        try:
-            self.app = self.he_plugin.application
-            self.ui_thread = self.app.ui.thread_connection()
-
-            self.__run()
-        except Exception as e:
-            self.logger.exception("Downloader thread failed: %s " % e)
-
-    def __run(self):
-        # Wait a second before the UI refresh so we get the right widgets
-        time.sleep(.5)
-
-        path = "%s/%s" % (self.setup_dir, self.url.split('/')[-1])
-
-        ui_is_alive = lambda: any((t.name == "MainThread") and t.is_alive() for
-                                  t in threading.enumerate())
-
-        with open(path, 'wb') as f:
-            started = time.time()
-            try:
-                r = requests.get(self.url, stream=True)
-                if r.status_code != 200:
-                    self.he_plugin._model['display_message'] = \
-                        "\n\nCannot download the file: HTTP error code %s" % \
-                        str(r.status_code)
-                    os.unlink(path)
-                    return self.he_plugin.show_dialog()
-
-                size = r.headers.get('content-length')
-            except requests.exceptions.ConnectionError as e:
-                self.logger.info("Error downloading: %s" % e[0], exc_info=True)
-                self.he_plugin._model['display_message'] = \
-                    "\n\nConnection Error: %s!" % str(e[0])
-                os.unlink(path)
-                return self.he_plugin.show_dialog()
-
-            downloaded = 0
-
-            def update_ui():
-                # Get new handles every time, since switching pages means
-                # the widgets will get rebuilt and we need new handles to
-                # update
-                progressbar = self.he_plugin.widgets["download.progress"]
-                status = self.he_plugin.widgets["download.status"]
-
-                current = int(100.0 * (float(downloaded) / float(size)))
-
-                progressbar.current(current)
-                speed = calculate_speed()
-                status.text(speed)
-
-                # Save it in the model so the page can update immediately
-                # on switching back instead of waiting for a tick
-                self.he_plugin._model.update({"download.status": speed})
-                self.he_plugin._model.update({"download.progressbar": current})
-
-            def calculate_speed():
-                raw = downloaded // (time.time() - started)
-                i = 0
-                friendly_names = ("B", "KB", "MB", "GB")
-                if int(raw / 1024) > 0:
-                    raw = raw / 1024
-                    i += 1
-                return "%0.2f %s/s" % (raw, friendly_names[i])
-
-            for chunk in r.iter_content(1024 * 256):
-                downloaded += len(chunk)
-                f.write(chunk)
-
-                if ui_is_alive():
-                    self.ui_thread.call(update_ui())
-                else:
-                    break
-
-        if not ui_is_alive():
-            os.unlink(path)
-
-        else:
-            self.he_plugin.write_config(os.path.basename(path))
-            self.he_plugin._configured = True
-            self.he_plugin.show_dialog()
-
-
-class HostedEngine(NodeConfigFileSection):
-    keys = ("OVIRT_HOSTED_ENGINE_IMAGE_PATH",
-            "OVIRT_HOSTED_ENGINE_PXE",
-            )
-
-    @NodeConfigFileSection.map_and_update_defaults_decorator
-    def update(self, imagepath, pxe):
-        if not isinstance(pxe, bool):
-            pxe = True if pxe.lower() == 'true' else False
-        (valid.Empty() | valid.Text())(imagepath)
-        (valid.Boolean()(pxe))
-        return {"OVIRT_HOSTED_ENGINE_IMAGE_PATH": imagepath,
-                "OVIRT_HOSTED_ENGINE_PXE": "yes" if pxe else None}
-
-    def retrieve(self):
-        cfg = dict(NodeConfigFileSection.retrieve(self))
-        cfg.update({"pxe": True if cfg["pxe"] == "yes" else False})
-        return cfg
-- 
1.8.3.1

