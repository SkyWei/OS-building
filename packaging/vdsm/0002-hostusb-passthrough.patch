From 5d8ca0b71f5b615a95aaad4976b703c255398a8f Mon Sep 17 00:00:00 2001
From: huntxu <mhuntxu@gmail.com>
Date: Mon, 24 Nov 2014 15:25:14 +0800
Subject: [PATCH 2/6] hostusb passthrough

Change-Id: I1d8f05adf0d23c435719b9d36d3b027827d984c8
Signed-off-by: huntxu <mhuntxu@gmail.com>

Conflicts:
	vdsm/API.py
	vdsm/rpc/BindingXMLRPC.py
	vdsm/rpc/vdsmapi-schema.json

Signed-off-by: huntxu <mhuntxu@gmail.com>
---
 vdsm.spec.in                        |  6 +++
 vdsm/API.py                         | 23 +++++++++++
 vdsm/Makefile.am                    |  2 +
 vdsm/hostusb.py                     | 71 ++++++++++++++++++++++++++++++++
 vdsm/rpc/BindingXMLRPC.py           | 15 +++++++
 vdsm/rpc/Bridge.py                  |  3 ++
 vdsm/rpc/vdsmapi-schema.json        | 82 +++++++++++++++++++++++++++++++++++++
 vdsm/vdsm-hostusb-passthrough.rules |  1 +
 vdsm/virt/vm.py                     | 76 ++++++++++++++++++++++++++++++++++
 9 files changed, 279 insertions(+)
 create mode 100644 vdsm/hostusb.py
 create mode 100644 vdsm/vdsm-hostusb-passthrough.rules

diff --git a/vdsm.spec.in b/vdsm.spec.in
index fd8c709..708f8a7 100644
--- a/vdsm.spec.in
+++ b/vdsm.spec.in
@@ -666,6 +666,10 @@ install -Dm 0755 init/sysvinit/respawn \
 install -Dm 0644 vdsm/storage/vdsm-lvm.rules \
                  %{buildroot}%{_udevrulesdir}/12-vdsm-lvm.rules
 
+# Install the hostusb passthrough rules
+install -Dm 0644 vdsm/vdsm-hostusb-passthrough.rules \
+                 %{buildroot}%{_udevrulesdir}/99-vdsm-hostusb-passthrough.rules
+
 install -Dm 0644 vdsm/limits.conf \
                  %{buildroot}/etc/security/limits.d/99-vdsm.conf
 
@@ -952,6 +956,7 @@ exit 0
 %{_datadir}/%{vdsm_name}/API.py*
 %{_datadir}/%{vdsm_name}/hooking.py*
 %{_datadir}/%{vdsm_name}/hooks.py*
+%{_datadir}/%{vdsm_name}/hostusb.py*
 %{_datadir}/%{vdsm_name}/lsblk.py*
 %{_datadir}/%{vdsm_name}/md_utils.py*
 %{_datadir}/%{vdsm_name}/mk_sysprep_floppy
@@ -1141,6 +1146,7 @@ exit 0
 %endif
 %{python_sitelib}/sos/plugins/vdsm.py*
 %{_udevrulesdir}/12-vdsm-lvm.rules
+%{_udevrulesdir}/99-vdsm-hostusb-passthrough.rules
 /etc/security/limits.d/99-vdsm.conf
 %{_mandir}/man8/vdsmd.8*
 %if 0%{?rhel}
diff --git a/vdsm/API.py b/vdsm/API.py
index b2caf44..fdfe2e2 100644
--- a/vdsm/API.py
+++ b/vdsm/API.py
@@ -50,6 +50,7 @@ import caps
 from vdsm.config import config
 import ksm
 import hooks
+import hostusb
 from caps import PAGE_SIZE_BYTES
 
 import supervdsm
@@ -382,6 +383,24 @@ class VM(APIBase):
             response['status']['message'] = 'Hibernation process starting'
         return response
 
+    def hostusbAttach(self, devname):
+        try:
+            curVm = self._cif.vmContainer[self._UUID]
+        except KeyError:
+            self.log.warning("vm %s doesn't exist", self._UUID)
+            return errCode['noVM']
+
+        return curVm.hostusbAttach(devname)
+
+    def hostusbDetach(self, devname):
+        try:
+            curVm = self._cif.vmContainer[self._UUID]
+        except KeyError:
+            self.log.warning("vm %s doesn't exist", self._UUID)
+            return errCode['noVM']
+
+        return curVm.hostusbDetach(devname)
+
     def vmUpdateDevice(self, params):
         if 'deviceType' not in params:
             self.log.error('Missing a required parameters: deviceType')
@@ -1273,6 +1292,10 @@ class Global(APIBase):
         statsList = hooks.after_get_all_vm_stats(statsList)
         return {'status': doneCode, 'statsList': statsList}
 
+    def hostusbList(self):
+        devices = hostusb.list_all()
+        return {'status': doneCode, 'deviceList': devices}
+
     def getStats(self):
         """
         Report host statistics.
diff --git a/vdsm/Makefile.am b/vdsm/Makefile.am
index 96deef2..754f294 100644
--- a/vdsm/Makefile.am
+++ b/vdsm/Makefile.am
@@ -32,6 +32,7 @@ dist_vdsm_PYTHON = \
 	dmidecodeUtil.py \
 	hooking.py \
 	hooks.py \
+	hostusb.py \
 	kaxmlrpclib.py \
 	ksm.py \
 	logUtils.py \
@@ -110,6 +111,7 @@ EXTRA_DIST = \
 	sudoers.vdsm.in \
 	svdsm.logger.conf.in \
 	vdsm-gencerts.sh.in \
+	vdsm-hostusb-passthrough.rules \
 	vdsm-libvirt-access.pkla \
 	vdsm-libvirt-access.rules \
 	vdsm-libvirt-logrotate \
diff --git a/vdsm/hostusb.py b/vdsm/hostusb.py
new file mode 100644
index 0000000..fe82caa
--- /dev/null
+++ b/vdsm/hostusb.py
@@ -0,0 +1,71 @@
+#
+# Copyright 2014 Eayun Co., Ltd.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+#
+# Refer to the README and COPYING files for full details of the license
+#
+
+import xml.etree.ElementTree
+from vdsm import libvirtconnection
+
+
+def list_all():
+    def _getHostDevOfDom(dom_xml):
+        domXML = xml.etree.ElementTree.fromstring(dom_xml)
+        uuid = domXML.find("uuid").text
+        for device in domXML.find("devices").iter("hostdev"):
+            if device.get("type") == "usb":
+                address = device.find("source").find("address")
+                key = "%s#%s" % (address.get("bus"), address.get("device"))
+                yield key, uuid
+
+    def _getDevInfo(dev_xml):
+        d = dict()
+        devXML = xml.etree.ElementTree.fromstring(dev_xml)
+        d["name"] = devXML.find("name").text
+        d["parent"] = devXML.find("parent").text
+
+        caps = devXML.find("capability")
+        d["bus"] = caps.find("bus").text
+        d["device"] = caps.find("device").text
+
+        for e in ("vendor", "product"):
+            eXML = caps.find(e)
+            if eXML is not None:
+                if "id" in eXML.attrib:
+                    d[e + "_id"] = eXML.get("id")
+                if eXML.text:
+                    d[e] = eXML.text
+
+        return d
+
+    used = dict()
+    devices = dict()
+
+    c = libvirtconnection.get()
+    for dom in c.listAllDomains():
+        for devid, domid in _getHostDevOfDom(dom.XMLDesc()):
+            used[devid] = domid
+
+    for dev in c.listDevices("usb_device"):
+        device = _getDevInfo(c.nodeDeviceLookupByName(dev).XMLDesc())
+        k = "%s#%s" % (device["bus"], device["device"])
+        if k in used:
+            device["vmId"] = used[k]
+        devname = device.pop("name")
+        devices[devname] = device
+
+    return devices
diff --git a/vdsm/rpc/BindingXMLRPC.py b/vdsm/rpc/BindingXMLRPC.py
index d460644..3335dd9 100644
--- a/vdsm/rpc/BindingXMLRPC.py
+++ b/vdsm/rpc/BindingXMLRPC.py
@@ -482,6 +482,18 @@ class BindingXMLRPC(object):
         api = API.Global()
         return api.getAllVmStats()
 
+    def hostusbList(self):
+        api = API.Global()
+        return api.hostusbList()
+
+    def vmHostusbAttach(self, vmId, devname):
+        api = API.VM(vmId)
+        return api.hostusbAttach(devname)
+
+    def vmHostusbDetach(self, vmId, devname):
+        api = API.VM(vmId)
+        return api.hostusbDetach(devname)
+
     def vmMigrationCreate(self, params):
         vm = API.VM(params['vmId'])
         return vm.migrationCreate(params)
@@ -985,6 +997,9 @@ class BindingXMLRPC(object):
                 (self.getStats, 'getVdsStats'),
                 (self.vmGetStats, 'getVmStats'),
                 (self.getAllVmStats, 'getAllVmStats'),
+                (self.hostusbList, 'hostusbList'),
+                (self.vmHostusbAttach, 'hostusbAttach'),
+                (self.vmHostusbDetach, 'hostusbDetach'),
                 (self.vmMigrationCreate, 'migrationCreate'),
                 (self.vmDesktopLogin, 'desktopLogin'),
                 (self.vmDesktopLogoff, 'desktopLogoff'),
diff --git a/vdsm/rpc/Bridge.py b/vdsm/rpc/Bridge.py
index 8b61e29..5274fb9 100644
--- a/vdsm/rpc/Bridge.py
+++ b/vdsm/rpc/Bridge.py
@@ -408,6 +408,7 @@ command_info = {
     'Host_getVMFullList': {'call': Host_getVMFullList_Call, 'ret': 'vmList'},
     'Host_getAllVmStats': {'ret': 'statsList'},
     'Host_setupNetworks': {'ret': 'status'},
+    'Host_hostusbList': {'ret': 'deviceList'},
     'Image_cloneStructure': {'ret': 'uuid'},
     'Image_delete': {'ret': 'uuid'},
     'Image_deleteVolumes': {'ret': 'uuid'},
@@ -445,6 +446,8 @@ command_info = {
     'VM_create': {'ret': 'vmList'},
     'VM_getInfo': {'call': VM_getInfo_Call, 'ret': VM_getInfo_Ret},
     'VM_getStats': {'ret': 'statsList'},
+    'VM_hostusbAttach': {'ret': 'status'},
+    'VM_hostusbDetach': {'ret': 'status'},
     'VM_hotplugDisk': {'ret': 'vmList'},
     'VM_hotplugNic': {'ret': 'vmList'},
     'VM_hotunplugDisk': {'ret': 'vmList'},
diff --git a/vdsm/rpc/vdsmapi-schema.json b/vdsm/rpc/vdsmapi-schema.json
index a03eb56..8ea8767 100644
--- a/vdsm/rpc/vdsmapi-schema.json
+++ b/vdsm/rpc/vdsmapi-schema.json
@@ -3577,6 +3577,59 @@
  'returns': ['VmStats']}
 
 ##
+# @HostUSBDevice:
+#
+# A host USB device parameters
+#
+# @vmId: The VM UUID to which the device is attached
+#
+# @parent: Name of the parent device
+#
+# @bus: USB bus number of the device
+#
+# @device: USB device number of the device
+#
+# @product_id: Hexadecimal representation of the product specified by vendor
+#
+# @product: String representation of the product specified by vendor
+#
+# @vendor_id: Hexadecimal representation of the vendor
+#
+# @vendor: String representation of the vendor
+#
+# Since: 4.16.7
+##
+{'type': 'HostUSBDevice',
+ 'data': {'vmId': 'UUID', 'parent': 'str', 'bus': 'str', 'device': 'str',
+          'product_id': 'str', 'product': 'str',
+          'vendor_id': 'str', 'vendor': 'str'}}
+
+##
+# @HostUSBDevices:
+#
+# Mapping of devices to their parameters
+#
+# @deviceName: Name of the device
+#
+# Since: 4.16.7
+##
+{'type': 'HostUSBDevices',
+ 'data': {'deviceName': 'HostUSBDevice'}}
+
+##
+# @Host.hostusbList:
+#
+# Get available USB devices on the host.
+#
+# Returns:
+# A list of USB devices on the host
+#
+# Since: 4.16.7
+##
+{'command': {'class': 'Host', 'name': 'hostusbList'},
+ 'returns': ['HostUSBDevices']}
+
+##
 # @Host.ping:
 #
 # Test connectivity to vdsm.
@@ -7603,3 +7656,32 @@
 ##
 {'command': {'class': 'VM', 'name': 'updateVmPolicy'},
  'data': {'vmID': 'UUID', 'vcpuLimit': 'int'}}
+
+##
+# @VM.hostusbAttach:
+#
+# Attach a host USB device to a VM
+#
+# @vmID: The UUID of the VM
+#
+# @devname: the name of the host USB device
+#
+# Since: 4.16.7
+##
+{'command': {'class': 'VM', 'name': 'hostusbAttach'},
+ 'data': {'vmID', 'UUID', 'devname': 'str'}}
+
+##
+# @VM.hostusbDetach:
+#
+# Detach a host USB device to a VM
+#
+# @vmID: The UUID of the VM
+#
+# @devname: the name of the host USB device
+#
+# Since: 4.16.7
+##
+
+{'command': {'class': 'VM', 'name': 'hostusbDetach'},
+ 'data': {'vmID', 'UUID', 'devname': 'str'}}
diff --git a/vdsm/vdsm-hostusb-passthrough.rules b/vdsm/vdsm-hostusb-passthrough.rules
new file mode 100644
index 0000000..42d6fa6
--- /dev/null
+++ b/vdsm/vdsm-hostusb-passthrough.rules
@@ -0,0 +1 @@
+SUBSYSTEM=="usb", ENV{DEVTYPE}=="usb_device", RUN+="/bin/setfacl -m user:qemu:rw $env{DEVNAME}"
diff --git a/vdsm/virt/vm.py b/vdsm/virt/vm.py
index 0f9e4ce..71ae3b7 100644
--- a/vdsm/virt/vm.py
+++ b/vdsm/virt/vm.py
@@ -1811,6 +1811,26 @@ class ConsoleDevice(VmDevice):
         return m
 
 
+class HostUSBDevice(VmDevice):
+    def getXML(self):
+        """
+        Create domxml for a hostUSB device.
+
+        <hostdev type='usb' mode='subsystem'>
+          <source>
+            <address bus='1' device='3'/>
+          </source>
+        </hostdev>
+        """
+        m = self.createXmlElem('hostdev', 'usb')
+        m.setAttrs(mode='subsystem')
+        source = self.createXmlElem('source', None)
+        source.appendChildWithArgs('address', bus=self.bus, device=self.device)
+        m.appendChild(source)
+
+        return m
+
+
 class MigrationError(Exception):
     pass
 
@@ -3436,6 +3456,62 @@ class Vm(object):
 
                 break
 
+    def _getHostUSBDevParams(self, devname):
+        devParams = {}
+        ParsedDevDomXML = _domParseStr(
+            self._connection.nodeDeviceLookupByName(devname).XMLDesc()
+        )
+
+        for ele in ParsedDevDomXML.documentElement.childNodes:
+            if ele.nodeName == "capability":
+                caps = ele
+
+        for cap in caps.childNodes:
+            if cap.nodeName == "bus":
+                devParams['bus'] = cap.firstChild.nodeValue
+            elif cap.nodeName == "device":
+                devParams['device'] = cap.firstChild.nodeValue
+
+        return devParams
+
+    def hostusbAttach(self, devname):
+        devParams = self._getHostUSBDevParams(devname)
+        dev = HostUSBDevice(self.conf, self.log, **devParams)
+        devXml = dev.getXML().toprettyxml(encoding='utf-8')
+        self.log.debug("HostUSB device xml: %s", devXml)
+
+        try:
+            self._dom.attachDevice(devXml)
+        except libvirt.libvirtError as e:
+            self.log.error("HostUSB device attach failed", exc_info=True)
+            if e.get_error_code() == libvirt.VIR_ERR_NO_DOMAIN:
+                return errCode['noVM']
+            return {
+                'status': {'code': errCode['hostUSBAttach']['status']['code'],
+                           'message': e.message}
+            }
+
+        return {'status': doneCode}
+
+    def hostusbDetach(self, devname):
+        devParams = self._getHostUSBDevParams(devname)
+        dev = HostUSBDevice(self.conf, self.log, **devParams)
+        devXml = dev.getXML().toprettyxml(encoding='utf-8')
+        self.log.debug("HostUSB device xml: %s", devXml)
+
+        try:
+            self._dom.detachDevice(devXml)
+        except libvirt.libvirtError as e:
+            self.log.error("HostUSB device detach failed", exc_info=True)
+            if e.get_error_code() == libvirt.VIR_ERR_NO_DOMAIN:
+                return errCode['noVM']
+            return {
+                'status': {'code': errCode['hostUSBDetach']['status']['code'],
+                           'message': e.message}
+            }
+
+        return {'status': doneCode}
+
     def hotplugNic(self, params):
         if self.isMigrating():
             return errCode['migInProgress']
-- 
1.8.3.1

